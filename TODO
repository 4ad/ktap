Todo list of ktap:

(You can make this todo list as ktap's implementation backlog
keep updating this file)

-------------------------------------------------------------------------

[HIGH]
- event based tracing infrastructure	--- done
- Drop ftrace.patch			--- done
- GC
- read kernel memory by symbol
- table stat showing			--- done
- ktap memory allocation		--- done
- per-cpu ktap_State for performance improvement	--- done
- x86-64 support			--- done
- non-mainthread error exit problem(like printf arg mismatch)
- ktapio problem in all event tracepoints opened
- ktapio support global and percpu mode
- issue: trace_end function cannot print into ktapio	--- done
- event library support(more type logic into compiler)
- change comments sytle to "#"	--- done


[NORMAL]
- ARM support
- All tracepoints support	--- done
- Timer support		--- done
- kprobe/uprobe support
- function call speedup	--- done
- improve printf performance
- dumpstack support		--- done
- script argument support
- call ktap script in while loop shell script issue
- maintaince different kernel version branch of ktap
- splice io output
- fast loading(not using temp file?)
- Interval timer probes fire periodicalle
	Available units: timer.s, jiffies, s/sec, ms/msec, us/usec, ns/nsec
        Add variation with .randomize(N)
    The profile timer runs on every systerm tick
        timer.profile
     runs on all CPUS, Includes context of interrupted process
- kernel_string()/user_string()
- More built-in functions:
    - Printing
    print(), println(), printd(), printf(),
    sprint(), sprintln(), sprintd(), sprintf()
    - Strings
    strlen(), substr(), isinstr(), strtol()
    - Timestamps
    get_cycles(), gettimeofday_s(), gettimeofday_ns()
    - Context
    cpu(), execname(), tid(), pid(), uid(),
    backtrace(), print_stack(), print_backtrace(),
    pp(), probefunc(), probemod()
- fibonacci in ktap	--- done
- unified event probe interface:
  os.probe("tracepoint:xxx", eventfun);
  os.probe("tp:xxx", eventfun);
  os.probe("kprobes:xxx", eventfun);
  os.probe("k:xxx", eventfun);
  os.probe("k:xxx!", eventfun);  //kretprobe
  os.probe("uprobes:xxx:yyy", eventfun);
  os.probe("u:xxx:yyy", eventfun);
  os.probe("u:xxx:yyy!", eventfun); //uretprobe

  os.probe("cache-misses", eventfun) //Hardware event
  os.probe("page-faults", eventfun) //Software event
  os.probe("branch-load-misses", eventfun) //Hardware cache event
  os.probe("mem:<addr>[:access]", eventfun) //Hardware breakpoint
  os.probe("net:netif_rx", eventfun) //Tracepoint event

  os.probe("kprobes:xxx, uprobes:xxx:yyy, cache-misses", eventfun) //support multi-event

- change library/trace.c to use perf event mechanism, without change ftrace code

- only tracing on cpu: ktap -c cpu *.kp
- support trace dump only to relayfs, without to userspace when tracing
- kernel_version() base function call

[LOW]
- dead loop detaction		--- done
- product more useful ktap script
- test script for verification		--- done
- not-tracing mode support(side effects mode)
- making ktap syntax more C like	--- done
- ktap Manual/Doc/ppt/pdf/man writing
- structure reference support in script like dtrace
- more lightwight traceing infrastructure support
- parrot research: use opcode generate like parrot
- support include header file in ktap script, only for compiler
- kernel 3.9(include previous kernel version) maintain, use same code base?
- ktap -e "oneline scripting"
- distro packages: yum install ktap, apt-get install ktap
- conference
- website in ktap.org (ROR on free hosting site? fast deployment)
- systemtap integrate: compile into ktap bytecode, use same vm in kernel
- commit to kernel: staging first?



- staticly typed virtual machine, it's more generic than dynamic typed vm
  support map/splice/struct/closure
  staticly typed is more faster than dynamic typed, with strict type checking

