
KTAP TRACING
------------
------------

1. High Level Tracing Primitive
-------------------------------

1). trace EVENTDEF function (e) { body }
 This is the basic tracing block for ktap, you need to use a specific EVENTDEF
 string, and own event function.

 EVENTDEF is compatiable with perf(see perf-list), with glob match, for example:

	"syscalls:*": trace all syscalls events
	"syscalls:sys_enter_*" : trace all syscalls entry events
	"kmem:*": trace all kmem related events
	"sched:*": trace all sched related events
	"*:*": trace all tracepoints in system.

 All events is based on: /sys/kernel/debug/tracing/events/$SYS/$EVENT

 Note that you can use function name after EVENTDEF like below:
	function event_func (e) { body }
	trace EVENTDEF event_func
 It's same as above one.

2). trace_end function () { body }
 This is based on kdebug.probe_end function.


2. Low Level Tracing Primitive
------------------------------

1). kdebug.probe_by_id(event_ids, eventfun)
 This function is underly representation of high level tracing primitive.
 event_ids is the id of all events, it's read from
	/sys/kernel/debug/tracing/events/$SYS/$EVENT/id

 for multi-events tracing, the event_ids is concatation of all id, for example:
 "2 3 4", seperated by blank space.

 The second argument in above examples is a function:

 function eventfun (e) { body }

 the argument of eventfun is a event object, we can operate on this object via several ways:
 e.name
     event name, each event have a name associated with it.
 e.tostring()
     this method is suit for tracepoint events, it will parse tracepoint events raw data
     into human readable string.
     the result is mostly same as each entry of /sys/kernel/debug/tracing/trace
 e.print_fmt
     this method is suit for tracepoint events, it's a inmutable string for each event,
     see /sys/kernel/debug/tracing/events/*/*/format
 e.sc_nr
     get syscall number of event, only valid for syscall events.
 e.sc_is_enter
     check if this is syscall enter event, only valid for syscall events.
 e.sc_arg1
     get argument 1 of syscall enter event.
 e.sc_arg2
     get argument 2 of syscall enter event.
 e.sc_arg3
     get argument 3 of syscall enter event.
 e.sc_arg4
     get argument 4 of syscall enter event.
 e.sc_arg5
     get argument 5 of syscall enter event.
 e.sc_arg6
     get argument 6 of syscall enter event.
 e.regstr
     return registers string
 e.retval
     [k/u]retprobe return value or syscall exit return value
 e.set_retval(N)
     set return value of [k/u]retprobe or syscall exit
 e.allfield
     return all fields of events, only valid for tracepoints.

2). kdebug.probe_end (endfunc)
 This function is used for invoking a function when tracing end, it will wait unitl
 user press CTRL+C to stop tracing, then ktap will call endfunc function, user could
 show tracing results in that function, or do other things.

 If user don't want to wait in that function, to force tracing end, user can set
 second argument of kdebug.probe_end function:

 kdebug.probe_end (endfunc, 1)

 Normally this usage mainly purpose for end tracing after some timer expired.

3). kdebug.dumpstack ()
 This function dump current thread stack into user.


