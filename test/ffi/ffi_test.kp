function failed(msg) {
	printf("failed: " .. msg);
	printf("\n")
	exit(-1);
}


ffi.cdef[[
	void ffi_test_void();
	int ffi_test_int1(unsigned char a, char b, unsigned short c, short d);
	long long ffi_test_int2(unsigned int a, int b, unsigned long c, long d,
				unsigned long long e, long long f, long long g);
	void *ffi_test_pointer1(char *a);
	long long ffi_test_var_arg(int n, ...);
	unsigned long long ffi_test_sched_clock(void);
	int ffi_test_array(int *arr, int idx);
	struct ffi_struct {
		int val;
	};
	int ffi_test_struct(struct ffi_struct *s);
	struct ffi_struct_loop {
		int val;
		struct ffi_struct_loop *next;
	};
	int ffi_test_struct_loop(struct ffi_struct_loop *s);
	union ffi_union {
		int val;
		int val2;
		int val3;
	};
	int ffi_test_union(union ffi_union *s);
]]


ret = ffi.C.ffi_test_void()
if (ret != nil) {
	failed("ffi_test_void should return nil")
}

ret = ffi.C.ffi_test_int1(1111, 1111, 1111, 1111)
if (ret != 2396) {
	failed("ffi_test_int1(1111, 1111, 1111, 1111) should return 2396")
}

ret = ffi.C.ffi_test_int2(90, 7800, 560000, 34000000, 1200000000, 900000000000, 78000000000000)
if (ret != 78901234567890) {
	failed("ffi_test_int2 should return 78901234567890")
}

ret = ffi.C.ffi_test_pointer1("")
if (ret == nil) {
	failed("ffi_test_pointer1 shoudl return address around 0xffff8800--------")
}

ret = ffi.C.ffi_test_var_arg(7, 90, 7800, 560000, 34000000, 1200000000, 900000000000, 78000000000000)
if (ret != 78901234567890) {
	failed("ffi_test_var_arg should return 78901234567890")
}

ret = ffi.C.ffi_test_sched_clock()
if (ret == nil) {
	failed("ffi_test_clock should not return nil")
}

arr = ffi.new("int[10]")
arr[9] = 10
arr[8] = arr[9]
ret = ffi.C.ffi_test_array(arr, 8)
if (ret != 10) {
	failed("ffi_test_array should return 10")
}
ffi.free(arr)

struct_p = ffi.new("struct ffi_struct[1]")
struct_p[0].val = 20
struct_p[0].val = struct_p[0].val
ret = ffi.C.ffi_test_struct(struct_p)
if (ret != 20) {
	failed("ffi_test_struct should return 20")
}
ffi.free(struct_p)

struct_p2 = ffi.new("struct ffi_struct_loop[1]")
struct_p2[0].val = 10
struct_p2[0].next = struct_p2
ret = ffi.C.ffi_test_struct_loop(struct_p2)
if (ret != 10) {
	failed("ffi_test_struct_loop should return 10")
}
ffi.free(struct_p2)

union_p = ffi.new("union ffi_union[1]")
union_p[0].val = 20
ret = ffi.C.ffi_test_union(union_p)
if (ret != 20) {
	failed("ffi_test_union should return 20")
}
union_p[0].val2 = 10
ret = ffi.C.ffi_test_union(union_p)
if (ret != 10) {
	failed("ffi_test_union should return 10")
}
ffi.free(union_p)
