#!/usr/bin/env ktap

local function failed() {
	printf("failed\n");
	exit(-1);
}

### basic function call ###
local function f1(a, b) {
	return a + b
}

if (f1(2, 3) != 5) {
	failed();
}

### return string ###
local function f2() {
	return "function return"
}

if (f2() != "function return") {
	failed();
}

### mutli-value return ###
local function f3(a, b) {
	return a+b, a-b;
}

local c, d = f3(2, 3);
if(c != 5 || d != -1) {
	failed();
}


### closure testing ### 
local function f4() {
	f5 = function(a, b) {
		return a * b
	}
	return f5
}

local f = f4()
if (f(9, 9) != 81) {
	failed();
}

### closure with lexcial variable ### 
# issue: variable cannot be local
local i = 1
local function f6() {
	i = 5
	f7 = function(a, b) {
		return a * b + i
	}
	return f7
}

f = f6()
if (f(9, 9) != 81 + i) {
	failed();
}

i = 6
if (f(9, 9) != 81 + i) {
	failed();
}

### tail call
### stack should not overflow in tail call mechanism
local a = 0
local function f8(i) {
	if (i == 1000000) {
		a = 1000000
		return
	}
	# must add return here, otherwise stack overflow
	return f8(i+1)
}

f8(0)
if (a != 1000000) {
	failed();
}


